"
Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:
""creates a board according probability ""
For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".

For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.

For the Collaborators Part: State my main collaborators and one line about how I interact with them. 

Public API and Key Messages

- message one   
- message two 
- (for bonus points) how to create instances.

   One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

    Instance Variables
	board:		<Object>
	listOfEffects:		<Object>
	listOfProbabilities:		<Object>
	size:		<Object>


    Implementation Points
"
Class {
	#name : #BoardCreator,
	#superclass : #Object,
	#instVars : [
		'listOfEffects',
		'size',
		'listOfProbabilities',
		'board',
		'vector'
	],
	#category : #'IngSoft2-Model'
}

{ #category : #creation }
BoardCreator class >> with: effects size: aNumberOfBoxes [ 
	^ self new 
	initializeWithEffects: effects
	size: aNumberOfBoxes ;
	yourself.
]

{ #category : #description }
BoardCreator >> amountOfBoxes [
	"return the size of the board"
	^ board size.
]

{ #category : #actions }
BoardCreator >> createBoard [
	| random |
	random := Random new.
	board := (1 to: size)
		collect: [ :element | board add: (vector at: (self getNumber: random next)) ].
	^ board.
]

{ #category : #actions }
BoardCreator >> createListOfProbabilites [
	(1 to: listOfEffects size) collect: [ :effectPosition | listOfProbabilities add: (listOfEffects at: effectPosition ) probability   ]
]

{ #category : #actions }
BoardCreator >> createVector [
	"Creates vector according Metodo De La Urna Algorithm"

	"For every exisiting effect add it (its probability * 100) times to vector array"

	(1 to: listOfEffects size)
		do: [ :element | 
			(1 to: (self getEffectProbability: element))
				do: [ :index | vector add: (self getEffectAt: element) ] ]
]

{ #category : #accessing }
BoardCreator >> getEffectAt: anIndex [
	"get effect from list of effects"
	^ listOfEffects at: anIndex.
]

{ #category : #description }
BoardCreator >> getEffectProbability: anIndex [
	" get probability of an efect from list of effects"
	^ ((listOfEffects at: anIndex) probability)*100
]

{ #category : #actions }
BoardCreator >> getNumber: aNumber [
	"get random number according metodo de la urna algorithm"
	^ (aNumber*100) asInteger +1.
]

{ #category : #initialize }
BoardCreator >> initializeWithEffects: effects size: aNumberOfBoxes [ 
	"initialize boardCreator object and its instances"
	listOfEffects := effects.
	size := aNumberOfBoxes .
	listOfProbabilities := OrderedCollection new.
	board := OrderedCollection new.
	vector := OrderedCollection new.
	self createListOfProbabilites.
	self createVector.
]

{ #category : #description }
BoardCreator >> probability [
	"return list of probabilities of every effect"
	^ listOfProbabilities .
]

{ #category : #accessing }
BoardCreator >> vector [
	"return the vector generated by the algorithm"
	^ vector.
]
